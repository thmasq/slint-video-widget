import { Slider, VerticalBox, HorizontalBox } from "std-widgets.slint";
import { SeekBar } from "seek_bar.slint";

export component VideoPlayerUI inherits Window {
    title: "Video Player";
    preferred-width: 1280px;
    preferred-height: 720px;
    background: #000;

    // === PROPERTIES ===
    in-out property <image> video_frame;
    in-out property <bool> is_playing: false;
    in-out property <bool> is_muted: false;
    in-out property <bool> is_fullscreen: false;
    in-out property <duration> video_duration: 100000ms;
    in-out property <duration> current_time: 0ms;
    in-out property <int> volume: 100;

    // === CALLBACKS ===
    callback play_pause_clicked();
    callback seek_changed(/* position_ms */ int);
    callback volume_changed(int);
    callback mute_clicked();
    callback fullscreen_clicked();

    // === HELPERS ===
    pure function format_time(time: duration) -> string {
        let total_seconds = floor(time / 1s);
        let mins = floor(total_seconds / 60);
        let secs = floor(mod(total_seconds, 60));
        return mins + ":" + (secs < 10 ? "0" : "") + secs;
    }

    // === INTERNAL STATE ===
    property <bool> show_controls: true;

    hide_timer := Timer {
        running: false;
        interval: 2000ms;
        triggered => {
            root.show_controls = false;
        }
    }

    VerticalBox {
        Rectangle {
            vertical-stretch: 1;
            background: #000;

            // --- Video Frame ---
            Image {
                width: 100%;
                height: 100%;
                source: video_frame;
                image-fit: contain;
            }

            // --- Overlay ---
            overlay := Rectangle {
                width: 100%;
                height: 100%;
                background: transparent;

                // Detect hover anywhere over video or controls
                TouchArea {
                    width: 100%;
                    height: 100%;

                    // When hovering, reset timer to keep controls visible
                    moved => {
                        root.show_controls = true;
                        hide_timer.restart();
                    }

                    // Also trigger on press (optional)
                    clicked => {
                        root.show_controls = true;
                        hide_timer.restart();
                    }

                    mouse-cursor: default;
                }

                // --- Controls ---
                controls_container := Rectangle {
                    width: 100%;
                    height: 52px;
                    y: parent.height - self.height;
                    background: @linear-gradient(180deg, #00000000 0%, #000000CC 100%);
                    opacity: root.show_controls ? 1.0 : 0.0;

                    animate opacity {
                        duration: 300ms;
                        easing: ease-in-out;
                    }

                    HorizontalBox {
                        padding: 10px;
                        spacing: 8px;
                        width: 100%;

                        // Play / Pause Button
                        Rectangle {
                            width: 32px;
                            height: 32px;

                            TouchArea {
                                width: 100%;
                                height: 100%;
                                clicked => { play_pause_clicked(); }
                                mouse-cursor: pointer;
                            }

                            Image {
                                width: 100%;
                                height: 100%;
                                source: is_playing
                                    ? @image-url("assets/pause.svg")
                                    : @image-url("assets/play.svg");
                            }
                        }

                        // Current Time
                        Text {
                            text: format_time(current_time);
                            color: white;
                            font-size: 12px;
                            vertical-alignment: center;
                        }

                        // Seek Slider (Main expandable element)
                        seek-bar := SeekBar {
                            horizontal-stretch: 1;
                            total-duration: video_duration;
                            value: current_time;
                            // buffer-duration: buffer_health;

                            scrubbed(duration) => {
                                seek_changed(duration / 1ms);
                            }
                        }

                        // Duration Time
                        Text {
                            text: format_time(video_duration);
                            color: white;
                            font-size: 12px;
                            vertical-alignment: center;
                        }

                        // Mute / Unmute Button
                        Rectangle {
                            width: 32px;
                            height: 32px;

                            TouchArea {
                                width: 100%;
                                height: 100%;
                                clicked => { mute_clicked(); }
                                mouse-cursor: pointer;
                            }

                            Image {
                                width: 100%;
                                height: 100%;
                                source: is_muted
                                    ? @image-url("assets/unmute.svg")
                                    : @image-url("assets/mute.svg");
                            }
                        }

                        volume-control := Rectangle {
                            width: 100px;
                            height: 32px;
                            
                            property <bool> dragging: false;

                            volume_slider := Slider {
                                width: 100%;
                                height: 100%;
                                minimum: 0;
                                maximum: 100;
                                value: volume;
                                enabled: !is_muted;
                            }
                            TouchArea {
                                width: 100%;
                                height: 100%;
                                mouse-cursor: pointer;
                                
                                pointer-event(event) => {
                                    if (event.kind == PointerEventKind.down) {
                                        parent.dragging = true;
                                        let new_volume = clamp(self.mouse-x / parent.width * 100, 0, 100);
                                        root.volume = new_volume;
                                        volume_changed(new_volume);
                                    } else if (event.kind == PointerEventKind.up) {
                                        parent.dragging = false;
                                    }
                                }
                                
                                moved => {
                                    if (parent.dragging) {
                                        let new_volume = clamp(self.mouse-x / parent.width * 100, 0, 100);
                                        root.volume = new_volume;
                                        volume_changed(new_volume);
                                    }
                                }
                            }
                        }

                        // Fullscreen Button
                        Rectangle {
                            width: 32px;
                            height: 32px;

                            TouchArea {
                                width: 100%;
                                height: 100%;
                                clicked => { fullscreen_clicked(); }
                                mouse-cursor: pointer;
                            }

                            Image {
                                width: 100%;
                                height: 100%;
                                source: is_fullscreen
                                    ? @image-url("assets/minimize.svg")
                                    : @image-url("assets/fullscreen.svg");
                            }
                        }
                    }
                }
            }
        }
    }
}
