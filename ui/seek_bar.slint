// seek_bar.slint

import { Slider } from "std-widgets.slint";

export component SeekBar inherits Rectangle {
    // === Public API ===
    in property <bool> enabled: true;
    out property <bool> has-focus: seek-slider.has-focus;

    in-out property <duration> value: 0s;
    in property <duration> buffer-duration: 0s;
    in property <duration> total-duration: 1s;
    callback scrubbed(duration);
    callback released(duration);

    // === Internal Implementation ===
    height: 30px;
    property <bool> dragging: false;

    // Convert duration to a float percentage for the slider
    private property <float> _value-as-percent: (value / 1ms) / (total-duration / 1ms);
    private property <float> _buffer-as-percent: (buffer-duration / 1ms) / (total-duration / 1ms);
    // Buffer health bar
    Rectangle {
        background: #666;
        width: parent.width * _buffer-as-percent;
        height: 100%;
        border-radius: 4px;
    }

    seek-slider := Slider {
        width: 100%;
        height: 100%;
        enabled: root.enabled;
        minimum: 0;
        maximum: 1.0;
        value: _value-as-percent;
    }

    touch_area := TouchArea {
        width: 100%;
        height: 100%;
        mouse-cursor: pointer;

        pointer-event(event) => {
            if (event.kind == PointerEventKind.down) {
                root.dragging = true;
                let new_percent = clamp(self.mouse-x / parent.width, 0, 1.0);
                let new_value = total-duration * new_percent;
                root.value = new_value;
                root.scrubbed(root.value);
            } else if (event.kind == PointerEventKind.up) {
                if (root.dragging) {
                    root.released(root.value);
                    root.dragging = false;
                }
            }
        }

        moved => {
            if (root.dragging) {
                let new_percent = clamp(self.mouse-x / parent.width, 0, 1.0);
                let new_value = total-duration * new_percent;
                root.value = new_value;
                root.scrubbed(root.value);
            }
        }
    }
}
